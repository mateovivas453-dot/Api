rom fastapi import FastAPI, HTTPException, status
from sqlmodel import SQLModel
from typing import List, Optional

class Usuario(SQLModel):
    id: int
    nombre_usuario: str
    contrasena: str
    email: Optional[str] = None
    esta_activo: bool = True

class UsuarioCrear(SQLModel):
    nombre_usuario: str
    contrasena: str
    email: Optional[str] = None
    esta_activo: bool = True

class UsuarioActualizar(SQLModel):
    nombre_usuario: Optional[str] = None
    email: Optional[str] = None
    esta_activo: Optional[bool] = None

class UsuarioPublico(SQLModel):
    id: int
    nombre_usuario: str
    email: Optional[str] = None
    esta_activo: bool = True

class CredencialesLogin(SQLModel):
    nombre_usuario: str
    contrasena: str

db_usuarios: List[Usuario] = [
    Usuario(id=1, nombre_usuario="admin", contrasena="abc", email="admin@cipherwall.com", esta_activo=True),
]
siguiente_id_usuario = 2

app = FastAPI(
    title="CipherWall",
    description="API con almacenamiento en memoria."
)

@app.get("/", tags=["Raíz"])
def leer_raiz():
    return {"mensaje": "Bienvenido al proyecto del primer parcial :)"}

@app.post("/users", response_model=UsuarioPublico, status_code=status.HTTP_201_CREATED, tags=["Usuarios"])
def crear_usuario(usuario_crear: UsuarioCrear):
    global siguiente_id_usuario
    
    if any(u.nombre_usuario == usuario_crear.nombre_usuario for u in db_usuarios):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="El nombre de usuario ya existe.")

    nuevo_usuario = Usuario(
        id=siguiente_id_usuario,
        nombre_usuario=usuario_crear.nombre_usuario,
        contrasena=usuario_crear.contrasena,
        email=usuario_crear.email,
        esta_activo=usuario_crear.esta_activo
    )
    db_usuarios.append(nuevo_usuario)
    siguiente_id_usuario += 1
    
    return UsuarioPublico.model_validate(nuevo_usuario)

@app.get("/users", response_model=List[UsuarioPublico], tags=["Usuarios"])
def listar_usuarios():
    return [UsuarioPublico.model_validate(usuario) for usuario in db_usuarios]

@app.get("/users/{id_usuario}", response_model=UsuarioPublico, tags=["Usuarios"])
def obtener_usuario(id_usuario: int):
    usuario = next((u for u in db_usuarios if u.id == id_usuario), None)
    if usuario:  
        return UsuarioPublico.model_validate(usuario)
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")

@app.put("/users/{id_usuario}", response_model=UsuarioPublico, tags=["Usuarios"])
def actualizar_usuario(id_usuario: int, usuario_actualizar: UsuarioActualizar):
    usuario = next((u for u in db_usuarios if u.id == id_usuario), None)
    
    if usuario:
        datos_actualizar = usuario_actualizar.model_dump(exclude_unset=True)
        
        for clave, valor in datos_actualizar.items():
            setattr(usuario, clave, valor)
            
        return UsuarioPublico.model_validate(usuario)
    else:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")

@app.delete("/users/{id_usuario}", status_code=status.HTTP_204_NO_CONTENT, tags=["Usuarios"])
def eliminar_usuario(id_usuario: int):
    global db_usuarios
    usuario_a_eliminar = next((u for u in db_usuarios if u.id == id_usuario), None)
    
    if usuario_a_eliminar: 
        db_usuarios.remove(usuario_a_eliminar) 
        return
    else: 
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Usuario no encontrado")

@app.post("/login", tags=["Autenticación"])
def iniciar_sesion(credenciales: CredencialesLogin):
    usuario = next((u for u in db_usuarios if u.nombre_usuario == credenciales.nombre_usuario), None)
    
    if usuario is None or usuario.contrasena != credenciales.contrasena:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciales inválidas",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    if not usuario.esta_activo:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Inicio de sesión fallido: la cuenta está inactiva.",
            headers={"WWW-Authenticate": "Bearer"},
        )
        
    return {"mensaje": f"Inicio de sesión exitoso para {usuario.nombre_usuario}"}
